package services

import (
	"deadline-bot/internal/config"
	"deadline-bot/internal/dto"
	"deadline-bot/internal/models"
	"deadline-bot/internal/repositories"
	"deadline-bot/pkg/utils"

	"fmt"
	"log"
	"time"

	"gorm.io/gorm"
)

type notificationService struct {
	notificationRepo repositories.NotificationRepository
	taskRepo         repositories.TaskRepository
	userRepo         repositories.UserRepository
	userGroupRepo    repositories.UserGroupRepository
	config           *config.NotificationsConfig
	sender           NotificationSender
}

func NewNotificationService(
	notificationRepo repositories.NotificationRepository,
	taskRepo repositories.TaskRepository,
	userRepo repositories.UserRepository,
	userGroupRepo repositories.UserGroupRepository,
	config *config.NotificationsConfig,
) NotificationService {
	return &notificationService{
		notificationRepo: notificationRepo,
		taskRepo:         taskRepo,
		userRepo:         userRepo,
		userGroupRepo:    userGroupRepo,
		config:           config,
	}
}

func (s *notificationService) SetNotificationSender(sender NotificationSender) {
	s.sender = sender
	log.Println("‚úÖ Notification sender —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
func (s *notificationService) CreateNotificationsForTask(taskID uint) error {
	if !s.config.EnableReminders {
		log.Println("DEBUG: Reminders disabled")
		return nil
	}

	task, err := s.taskRepo.GetByID(taskID)
	if err != nil {
		return fmt.Errorf("failed to get task: %w", err)
	}

	userGroups, err := s.userGroupRepo.GetUsersByGroup(task.GroupID)
	if err != nil {
		return fmt.Errorf("failed to get group users: %w", err)
	}

	created := 0
	now := time.Now()

	for _, userGroup := range userGroups {
		for _, days := range s.config.DefaultReminders {
			// –í—ã—á–∏—Å–ª—è–µ–º –¢–û–ß–ù–û–ï –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			scheduledTime := task.Deadline.AddDate(0, 0, -days)

			// –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
			if scheduledTime.Before(now) && task.Deadline.After(now) {
				scheduledTime = now.Add(1 * time.Minute) // –æ—Ç–ø—Ä–∞–≤–∏–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
			}

			// –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if task.Deadline.Before(now) {
				continue
			}

			var notificationType string
			switch days {
			case 1:
				notificationType = models.NotificationTypeOneDay
			case 3:
				notificationType = models.NotificationTypeThreeDays
			case 7:
				notificationType = models.NotificationTypeOneWeek
			default:
				continue
			}

			notification := &models.Notification{
				UserID:        userGroup.UserID,
				TaskID:        taskID,
				Type:          notificationType,
				ScheduledTime: &scheduledTime, // –ù–û–í–û–ï –ü–û–õ–ï!
			}

			if err := s.notificationRepo.Create(notification); err != nil {
				log.Printf("‚ùå Failed to create notification: %v", err)
				continue
			}

			created++
			log.Printf("‚úÖ Created %s notification for user %d, scheduled for %v",
				notificationType, userGroup.UserID, scheduledTime)
		}
	}

	log.Printf("üìã Created %d notifications for task %d", created, taskID)
	return nil
}

// –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≥–¥–µ scheduled_time <= now
func (s *notificationService) ProcessPendingNotifications() error {
	if !s.config.EnableReminders {
		return nil
	}

	if s.sender == nil {
		log.Println("‚ö†Ô∏è Notification sender not set")
		return nil
	}

	log.Println("üîç Processing pending notifications...")

	// –ò—â–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
	notifications, err := s.notificationRepo.GetReadyToSend(time.Now())
	if err != nil {
		return fmt.Errorf("failed to get ready notifications: %w", err)
	}

	log.Printf("üîç Found %d notifications ready to send", len(notifications))

	sent := 0
	for _, notification := range notifications {
		log.Printf("üì§ Sending notification %d to user %d", notification.ID, notification.UserID)

		if err := s.sendNotification(&notification); err != nil {
			log.Printf("‚ùå Failed to send notification %d: %v", notification.ID, err)
			continue
		}

		if err := s.notificationRepo.MarkAsSent(notification.ID); err != nil {
			log.Printf("‚ùå Failed to mark notification %d as sent: %v", notification.ID, err)
			continue
		}

		sent++
		log.Printf("‚úÖ Successfully sent notification %d", notification.ID)
	}

	log.Printf("üì§ Sent %d notifications", sent)
	return nil
}

func (s *notificationService) sendNotification(notification *models.Notification) error {
	if s.sender == nil {
		return fmt.Errorf("notification sender not set")
	}

	user, err := s.userRepo.GetByID(notification.UserID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	task, err := s.taskRepo.GetByID(notification.TaskID)
	if err != nil {
		return fmt.Errorf("failed to get task: %w", err)
	}

	var typeText string
	switch notification.Type {
	case models.NotificationTypeOneDay:
		typeText = "–∑–∞–≤—Ç—Ä–∞"
	case models.NotificationTypeThreeDays:
		typeText = "—á–µ—Ä–µ–∑ 3 –¥–Ω—è"
	case models.NotificationTypeOneWeek:
		typeText = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
	default:
		typeText = "—Å–∫–æ—Ä–æ"
	}

	message := fmt.Sprintf("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!\n\n"+
		"üìã –ó–∞–¥–∞—á–∞: %s\n"+
		"‚è∞ –î–µ–¥–ª–∞–π–Ω %s (%s)\n"+
		"üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s",
		task.Title,
		typeText,
		utils.FormatDeadline(task.Deadline),
		task.Description)

	return s.sender.SendNotification(user.TelegramID, message)
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å...
func (s *notificationService) GetUserNotifications(telegramID int64) ([]dto.NotificationResponse, error) {
	user, err := s.userRepo.GetByTelegramID(telegramID)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	notifications, err := s.notificationRepo.GetPendingByUserID(user.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get notifications: %w", err)
	}

	responses := make([]dto.NotificationResponse, len(notifications))
	for i, notification := range notifications {
		responses[i] = *utils.NotificationToResponse(&notification)
	}

	return responses, nil
}

func (s *notificationService) GetPendingNotifications() ([]dto.NotificationResponse, error) {
	if !s.config.EnableReminders {
		return nil, nil
	}

	notifications, err := s.notificationRepo.GetReadyToSend(time.Now())
	if err != nil {
		return nil, fmt.Errorf("failed to get ready notifications: %w", err)
	}

	responses := make([]dto.NotificationResponse, len(notifications))
	for i, notification := range notifications {
		responses[i] = *utils.NotificationToResponse(&notification)
	}

	return responses, nil
}

func (s *notificationService) MarkNotificationSent(id uint) error {
	return s.notificationRepo.MarkAsSent(id)
}

func (s *notificationService) DeleteTaskNotifications(taskID uint) error {
	return s.notificationRepo.DeleteByTaskID(taskID)
}

func (s *notificationService) CheckAndSendNotifications() error {
	return s.ProcessPendingNotifications()
}

func (s *notificationService) CreateTestNotifications(telegramID int64) error {
	user, err := s.userRepo.GetByTelegramID(telegramID)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
	scheduledTime := time.Now().Add(30 * time.Second)

	testNotification := &models.Notification{
		UserID:        user.ID,
		TaskID:        1, // –ª—é–±–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞
		Type:          models.NotificationTypeOneDay,
		ScheduledTime: &scheduledTime,
	}

	if err := s.notificationRepo.Create(testNotification); err != nil {
		return fmt.Errorf("failed to create test notification: %w", err)
	}

	log.Printf("‚úÖ Created test notification for user %d, scheduled for %v", user.ID, scheduledTime)
	return nil
}
