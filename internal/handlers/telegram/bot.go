package telegram

import (
	"deadline-bot/internal/config"
	"deadline-bot/internal/dto"
	"deadline-bot/internal/services"
	"deadline-bot/pkg/utils"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api                 *tgbotapi.BotAPI
	userService         services.UserService
	groupService        services.GroupService
	taskService         services.TaskService
	authService         services.AuthService
	fileService         services.FileService
	exportService       services.ExportService
	notificationService services.NotificationService
}

type UserSession struct {
	State     string
	Data      map[string]interface{}
	GroupID   uint
	MessageID int
}

var userSessions = make(map[int64]*UserSession)

func NewBot(
	config *config.BotConfig,
	userService services.UserService,
	groupService services.GroupService,
	taskService services.TaskService,
	authService services.AuthService,
	fileService services.FileService,
	exportService services.ExportService,
	notificationService services.NotificationService,
) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(config.Token)
	if err != nil {
		return nil, err
	}

	api.Debug = config.Debug

	bot := &Bot{
		api:                 api,
		userService:         userService,
		groupService:        groupService,
		taskService:         taskService,
		authService:         authService,
		fileService:         fileService,
		exportService:       exportService,
		notificationService: notificationService,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–±—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	notificationService.SetNotificationSender(bot)

	if err := bot.setCommands(); err != nil {
		log.Printf("Warning: Failed to set bot commands: %v", err)
	}

	return bot, nil
}

func (b *Bot) Start() error {
	log.Printf("Authorized on account %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		go b.handleUpdate(update)
	}

	return nil
}

func (b *Bot) Stop() {
	b.api.StopReceivingUpdates()
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		b.handleMessage(update.Message)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
	}
}

func (b *Bot) handleTestNotificationsCommand(message *tgbotapi.Message) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "check_notifications"),
			tgbotapi.NewInlineKeyboardButtonData("üß™ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ", "create_test_notification"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "my_notifications"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	if message.Document != nil {
		b.handleDocument(message)
		return
	}

	session := getUserSession(userID)
	if session != nil && session.State != "" {
		b.handleSessionInput(message, session)
		return
	}

	b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
}

func (b *Bot) handleCommand(message *tgbotapi.Message) {
	userID := message.From.ID

	b.ensureUserExists(message.From)

	switch message.Command() {
	case "start":
		b.handleStartCommand(message)
	case "help":
		b.handleHelpCommand(message)
	case "new_group", "newgroup":
		b.handleNewGroupCommand(message)
	case "connect":
		b.handleConnectCommand(message)
	case "my_groups", "mygroups":
		b.handleMyGroupsCommand(message)
	case "select_group", "selectgroup":
		b.handleSelectGroupCommand(message)
	case "new_task", "newtask":
		b.handleNewTaskCommand(message)
	case "tasks":
		b.handleTasksCommand(message)
	case "export":
		b.handleExportCommand(message)
	case "test_notifications":
		b.handleTestNotificationsCommand(message)
	case "create_test_task":
		b.handleUploadFileCommand(message)
	case "task_files":
		b.handleTaskFilesCommand(message)
	case "download_file":
		b.handleDownloadFileCommand(message)
	case "cancel":
		clearUserSession(userID)
		b.sendMessage(message.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	data := callbackQuery.Data

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	if data == "check_notifications" || data == "create_test_notification" || data == "my_notifications" {
		b.handleNotificationCallback(callbackQuery)
		return
	}

	// –û—Å—Ç–∞–ª—å–Ω—ã–µ callbacks
	b.handleCallback(callbackQuery)
}

func (b *Bot) handleNotificationCallback(callbackQuery *tgbotapi.CallbackQuery) {
	data := callbackQuery.Data

	switch data {
	case "check_notifications":
		b.checkAndSendNotifications(callbackQuery)
	case "create_test_notification":
		b.createTestNotification(callbackQuery)
	case "my_notifications":
		b.showMyNotifications(callbackQuery)
	}
}

func (b *Bot) checkAndSendNotifications(callbackQuery *tgbotapi.CallbackQuery) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "–ü—Ä–æ–≤–µ—Ä—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
	b.api.Request(callback)

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	pendingNotifications, err := b.notificationService.GetPendingNotifications()
	if err != nil {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: "+err.Error())
		return
	}

	if len(pendingNotifications) == 0 {
		b.sendMessage(callbackQuery.Message.Chat.ID, "üì≠ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
		return
	}

	sent := 0
	for _, notification := range pendingNotifications {
		if err := b.sendNotificationToUser(&notification); err != nil {
			log.Printf("Failed to send notification %d: %v", notification.ID, err)
			continue
		}

		// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
		if err := b.notificationService.MarkNotificationSent(notification.ID); err != nil {
			log.Printf("Failed to mark notification %d as sent: %v", notification.ID, err)
		}
		sent++
	}

	b.sendMessage(callbackQuery.Message.Chat.ID,
		fmt.Sprintf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %d –∏–∑ %d", sent, len(pendingNotifications)))
}

func (b *Bot) createTestNotification(callbackQuery *tgbotapi.CallbackQuery) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
	b.api.Request(callback)

	err := b.notificationService.CreateTestNotifications(callbackQuery.From.ID)
	if err != nil {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: "+err.Error())
		return
	}

	b.sendMessage(callbackQuery.Message.Chat.ID, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
}

func (b *Bot) sendNotificationToUser(notification *dto.NotificationResponse) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user, err := b.userService.GetUserByID(notification.User.ID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
	task, err := b.taskService.GetTaskByID(notification.Task.ID)
	if err != nil {
		return fmt.Errorf("failed to get task: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	var typeText string
	switch notification.Type {
	case "1day":
		typeText = "–∑–∞–≤—Ç—Ä–∞"
	case "3days":
		typeText = "—á–µ—Ä–µ–∑ 3 –¥–Ω—è"
	case "1week":
		typeText = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
	default:
		typeText = "—Å–∫–æ—Ä–æ"
	}

	text := fmt.Sprintf("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!\n\n"+
		"üìã –ó–∞–¥–∞—á–∞: %s\n"+
		"‚è∞ –î–µ–¥–ª–∞–π–Ω %s (%s)\n"+
		"üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s",
		task.Title,
		typeText,
		utils.FormatDeadline(task.Deadline),
		task.Description)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(user.TelegramID, text)
	_, err = b.api.Send(msg)

	return err
}

func (b *Bot) showMyNotifications(callbackQuery *tgbotapi.CallbackQuery) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "–ü–æ–ª—É—á–∞—é –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
	b.api.Request(callback)

	notifications, err := b.notificationService.GetUserNotifications(callbackQuery.From.ID)
	if err != nil {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: "+err.Error())
		return
	}

	if len(notifications) == 0 {
		b.sendMessage(callbackQuery.Message.Chat.ID, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	text := fmt.Sprintf("üìã –í–∞—à–∏ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (%d):\n\n", len(notifications))
	for i, notif := range notifications {
		text += fmt.Sprintf("%d. %s\n", i+1, notif.Type)
	}

	b.sendMessage(callbackQuery.Message.Chat.ID, text)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	b.api.Send(msg)
}

func (b *Bot) sendMessageWithKeyboard(chatID int64, text string, keyboard interface{}) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown

	switch kb := keyboard.(type) {
	case tgbotapi.InlineKeyboardMarkup:
		msg.ReplyMarkup = kb
	case tgbotapi.ReplyKeyboardMarkup:
		msg.ReplyMarkup = kb
	}

	b.api.Send(msg)
}

func (b *Bot) editMessage(chatID int64, messageID int, text string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	if keyboard != nil {
		msg.ReplyMarkup = keyboard
	}
	b.api.Send(msg)
}

func (b *Bot) ensureUserExists(from *tgbotapi.User) {
	_, err := b.userService.GetUserByTelegramID(from.ID)
	if err != nil {
		userReq := &dto.UserRequest{
			TelegramID: from.ID,
			Username:   from.UserName,
			FirstName:  from.FirstName,
			LastName:   from.LastName,
		}
		b.userService.CreateUser(userReq)
	}
}

func getUserSession(userID int64) *UserSession {
	return userSessions[userID]
}

func setUserSession(userID int64, session *UserSession) {
	userSessions[userID] = session
}

func clearUserSession(userID int64) {
	delete(userSessions, userID)
}

func updateUserSessionState(userID int64, state string) {
	session := getUserSession(userID)
	if session == nil {
		session = &UserSession{
			Data: make(map[string]interface{}),
		}
	}
	session.State = state
	setUserSession(userID, session)
}

func (b *Bot) setCommands() error {
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		{Command: "help", Description: "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"},
		{Command: "new_group", Description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"},
		{Command: "connect", Description: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ"},
		{Command: "my_groups", Description: "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"},
		{Command: "select_group", Description: "–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É"},
		{Command: "new_task", Description: "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"},
		{Command: "tasks", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"},
		{Command: "export", Description: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á"},
		{Command: "test_notifications", Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"},
		{Command: "create_test_task", Description: "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É"},
		{Command: "cancel", Description: "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"},
	}

	setCommandsConfig := tgbotapi.NewSetMyCommands(commands...)
	_, err := b.api.Request(setCommandsConfig)
	return err
}

func (b *Bot) SendNotification(userTelegramID int64, message string) error {
	msg := tgbotapi.NewMessage(userTelegramID, message)
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("‚ùå Failed to send notification to user %d: %v", userTelegramID, err)
	} else {
		log.Printf("‚úÖ Sent notification to user %d", userTelegramID)
	}
	return err
}
