package telegram

import (
	"deadline-bot/internal/dto"
	"deadline-bot/pkg/utils"

	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleGroupNameInput(message *tgbotapi.Message, session *UserSession) {
	name := strings.TrimSpace(message.Text)
	if len(name) == 0 || len(name) > 200 {
		b.sendMessage(message.Chat.ID, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	session.Data["name"] = name
	session.State = "creating_group_login"

	b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≥—Ä—É–ø–ø—ã (3-50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):")
}

func (b *Bot) handleGroupLoginInput(message *tgbotapi.Message, session *UserSession) {
	login := strings.TrimSpace(message.Text)

	if err := utils.ValidateGroupLogin(login); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	session.Data["login"] = login
	session.State = "creating_group_password"

	b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≥—Ä—É–ø–ø—ã (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—É –∏ —Ü–∏—Ñ—Ä—É):")
}

func (b *Bot) handleGroupPasswordInput(message *tgbotapi.Message, session *UserSession) {
	password := message.Text

	if err := utils.ValidatePassword(password); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	req := &dto.CreateGroupRequest{
		Name:     session.Data["name"].(string),
		Login:    session.Data["login"].(string),
		Password: password,
	}

	group, err := b.groupService.CreateGroup(message.From.ID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: "+err.Error())
		clearUserSession(message.From.ID)
		return
	}

	session.GroupID = group.ID
	clearUserSession(message.From.ID)
	setUserSession(message.From.ID, &UserSession{GroupID: group.ID, Data: make(map[string]interface{})})

	text := "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã –ù–∞–∑–≤–∞–Ω–∏–µ: " + group.Name + "\nüë§ –õ–æ–≥–∏–Ω: @" + group.Login + "\n\n–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /new_task"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleConnectLoginInput(message *tgbotapi.Message, session *UserSession) {
	login := strings.TrimSpace(message.Text)

	if len(login) == 0 {
		b.sendMessage(message.Chat.ID, "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	session.Data["login"] = login
	session.State = "connecting_password"

	b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≥—Ä—É–ø–ø—ã:")
}

func (b *Bot) handleConnectPasswordInput(message *tgbotapi.Message, session *UserSession) {
	password := message.Text

	req := &dto.ConnectGroupRequest{
		Login:    session.Data["login"].(string),
		Password: password,
	}

	group, err := b.groupService.ConnectToGroup(message.From.ID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: "+err.Error())
		clearUserSession(message.From.ID)
		return
	}

	session.GroupID = group.ID
	clearUserSession(message.From.ID)
	setUserSession(message.From.ID, &UserSession{GroupID: group.ID, Data: make(map[string]interface{})})

	text := "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ!\n\nüìã –ù–∞–∑–≤–∞–Ω–∏–µ: " + group.Name + "\nüë§ –õ–æ–≥–∏–Ω: @" + group.Login + "\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /tasks"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleTaskTitleInput(message *tgbotapi.Message, session *UserSession) {
	title := strings.TrimSpace(message.Text)

	if err := utils.ValidateTaskTitle(title); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	session.Data["title"] = title
	session.State = "creating_task_description"

	b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

func (b *Bot) handleTaskDescriptionInput(message *tgbotapi.Message, session *UserSession) {
	description := strings.TrimSpace(message.Text)

	if description == "-" {
		description = ""
	} else if err := utils.ValidateTaskDescription(description); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	session.Data["description"] = description
	session.State = "creating_task_deadline"

	text := `–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ 25.12.2024 23:59
‚Ä¢ 25.12.2024
‚Ä¢ 2024-12-25 23:59
‚Ä¢ 2024-12-25`

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleTaskDeadlineInput(message *tgbotapi.Message, session *UserSession) {
	deadlineStr := strings.TrimSpace(message.Text)

	deadline, err := utils.ParseDeadline(deadlineStr)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	if err := utils.ValidateDeadline(deadline); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()+"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	groupID := session.Data["group_id"].(uint)

	req := &dto.CreateTaskRequest{
		Title:       session.Data["title"].(string),
		Description: session.Data["description"].(string),
		Deadline:    deadline,
	}

	task, err := b.taskService.CreateTask(message.From.ID, groupID, req)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: "+err.Error())
		clearUserSession(message.From.ID)
		return
	}

	clearUserSession(message.From.ID)
	setUserSession(message.From.ID, &UserSession{GroupID: groupID, Data: make(map[string]interface{})})

	priorityEmoji := b.getPriorityEmoji(task.Priority)

	text := `‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*

` + priorityEmoji + ` *` + utils.EscapeMarkdown(task.Title) + `*

üóì *–î–µ–¥–ª–∞–π–Ω:* ` + utils.FormatDeadline(task.Deadline) + `
üéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ` + task.Priority

	if task.Description != "" {
		text += `
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ` + utils.EscapeMarkdown(task.Description)
	}

	b.sendMessage(message.Chat.ID, text)
}
