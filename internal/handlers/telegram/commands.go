package telegram

import (
	"deadline-bot/pkg/utils"
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleStartCommand(message *tgbotapi.Message) {
	text := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeadlineBot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ/–∫–ª–∞—Å—Å–µ.

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
/new_group - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
/connect - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ
/my_groups - –º–æ–∏ –≥—Ä—É–ø–ø—ã

–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)

	b.sendWelcomeImage(message.Chat.ID)
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	text := `üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º DeadlineBot

üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:

/new_group - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
/connect - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
/my_groups - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø
/select_group - –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É

üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:

/new_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã
/export - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≤ Excel/PDF

‚öôÔ∏è –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:

/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á:

üü¢ –ù–∏–∑–∫–∏–π - –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
üü° –û–±—ã—á–Ω—ã–π - 3-7 –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞  
üü† –í—ã—Å–æ–∫–∏–π - 1-3 –¥–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –º–µ–Ω–µ–µ –¥–Ω—è –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)

	b.sendPrioritiesImage(message.Chat.ID)
}

func (b *Bot) handleNewGroupCommand(message *tgbotapi.Message) {
	updateUserSessionState(message.From.ID, "creating_group_name")

	text := `üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)

	b.sendCreateGroupImage(message.Chat.ID)
}

func (b *Bot) handleConnectCommand(message *tgbotapi.Message) {
	updateUserSessionState(message.From.ID, "connecting_login")

	text := `üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ

–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≥—Ä—É–ø–ø—ã:`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)

	b.sendConnectGroupImage(message.Chat.ID)
}

func (b *Bot) handleMyGroupsCommand(message *tgbotapi.Message) {
	groups, err := b.groupService.GetUserGroups(message.From.ID)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: "+err.Error())
		return
	}

	if len(groups) == 0 {
		text := "üìù –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/new_group - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É\n/connect - —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π"

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	var text strings.Builder
	text.WriteString("üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n")

	for i, group := range groups {
		text.WriteString(fmt.Sprintf("%d. %s (@%s)\n", i+1, group.Name, group.Login))
	}

	text.WriteString("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_group –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã")

	msg := tgbotapi.NewMessage(message.Chat.ID, text.String())
	b.api.Send(msg)
}

func (b *Bot) handleSelectGroupCommand(message *tgbotapi.Message) {
	groups, err := b.groupService.GetUserGroups(message.From.ID)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: "+err.Error())
		return
	}

	if len(groups) == 0 {
		b.sendMessage(message.Chat.ID, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_groups")
		return
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup()
	for _, group := range groups {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s (@%s)", group.Name, group.Login),
			fmt.Sprintf("select_group_%d", group.ID),
		)
		row := tgbotapi.NewInlineKeyboardRow(button)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleNewTaskCommand(message *tgbotapi.Message) {
	session := getUserSession(message.From.ID)
	if session == nil || session.GroupID == 0 {
		text := "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /select_group\n\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É: /new_group"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	updateUserSessionState(message.From.ID, "creating_task_title")
	session = getUserSession(message.From.ID)
	session.Data["group_id"] = session.GroupID

	text := `üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)

	b.sendCreateTaskImage(message.Chat.ID)
}

func (b *Bot) handleTasksCommand(message *tgbotapi.Message) {
	session := getUserSession(message.From.ID)
	if session == nil || session.GroupID == 0 {
		text := "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /select_group\n\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É: /new_group"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	tasks, err := b.taskService.GetGroupTasks(session.GroupID, nil)
	if err != nil {
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + err.Error()
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	if len(tasks.Tasks) == 0 {
		text := "üìù –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_task —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É"

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	var text strings.Builder
	text.WriteString("üìã –ó–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã:\n\n")

	for i, task := range tasks.Tasks {
		priorityEmoji := b.getPriorityEmoji(task.Priority)
		statusEmoji := b.getStatusEmoji(task.Status)

		// –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
		text.WriteString(fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ: %s %s %s\n", priorityEmoji, statusEmoji, task.Title))

		// –î–µ–¥–ª–∞–π–Ω
		text.WriteString(fmt.Sprintf("–î–µ–¥–ª–∞–π–Ω: %s\n", utils.FormatDeadline(task.Deadline)))

		// –û–ø–∏—Å–∞–Ω–∏–µ
		if task.Description != "" && len(task.Description) > 0 {
			desc := task.Description
			if len(desc) > 100 {
				desc = desc[:100] + "..."
			}
			text.WriteString(fmt.Sprintf("–û–ø–∏—Å–∞–Ω–∏–µ: %s\n", desc))
		} else {
			text.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: ‚Äî\n")
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
		if i < len(tasks.Tasks)-1 {
			text.WriteString("\n" + strings.Repeat("‚îÄ", 30) + "\n\n")
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text.String())
	b.api.Send(msg)

	b.sendTaskManagementImage(message.Chat.ID)
}

func (b *Bot) handleExportCommand(message *tgbotapi.Message) {
	session := getUserSession(message.From.ID)
	if session == nil || session.GroupID == 0 {
		text := "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /select_group\n\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É: /new_group"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä Excel", fmt.Sprintf("export_excel_%d", session.GroupID)),
			tgbotapi.NewInlineKeyboardButtonData("üìÑ PDF", fmt.Sprintf("export_pdf_%d", session.GroupID)),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)

	b.sendExportDemoImage(message.Chat.ID)
}

func (b *Bot) handleSessionInput(message *tgbotapi.Message, session *UserSession) {
	switch session.State {
	case "creating_group_name":
		b.handleGroupNameInput(message, session)
	case "creating_group_login":
		b.handleGroupLoginInput(message, session)
	case "creating_group_password":
		b.handleGroupPasswordInput(message, session)
	case "connecting_login":
		b.handleConnectLoginInput(message, session)
	case "connecting_password":
		b.handleConnectPasswordInput(message, session)
	case "creating_task_title":
		b.handleTaskTitleInput(message, session)
	case "creating_task_description":
		b.handleTaskDescriptionInput(message, session)
	case "creating_task_deadline":
		b.handleTaskDeadlineInput(message, session)
	default:
		clearUserSession(message.From.ID)
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
	}
}

func (b *Bot) getPriorityEmoji(priority string) string {
	switch priority {
	case "low":
		return "üü¢"
	case "normal":
		return "üü°"
	case "high":
		return "üü†"
	case "critical":
		return "üî¥"
	default:
		return "‚ö™"
	}
}

func (b *Bot) getStatusEmoji(status string) string {
	switch status {
	case "pending":
		return "‚è≥"
	case "completed":
		return "‚úÖ"
	case "overdue":
		return "‚ùå"
	default:
		return "‚ùì"
	}
}
