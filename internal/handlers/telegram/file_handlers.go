package telegram

import (
	"deadline-bot/internal/dto"
	"deadline-bot/pkg/utils"

	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleDocument(message *tgbotapi.Message) {
	session := getUserSession(message.From.ID)
	if session == nil || session.GroupID == 0 {
		b.sendMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /select_group")
		return
	}

	if session.State != "uploading_file" {
		b.sendMessage(message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload_file –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫ –∑–∞–¥–∞—á–µ")
		return
	}

	taskID, ok := session.Data["task_id"].(uint)
	if !ok {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
		clearUserSession(message.From.ID)
		return
	}

	document := message.Document
	if document == nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	fileConfig := tgbotapi.FileConfig{FileID: document.FileID}
	file, err := b.api.GetFile(fileConfig)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}

	fileURL := file.Link(b.api.Token)
	resp, err := http.Get(fileURL)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}
	defer resp.Body.Close()

	fileData, err := io.ReadAll(resp.Body)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}

	mimeType := document.MimeType
	if mimeType == "" {
		mimeType = "application/octet-stream"
	}

	uploadReq := &dto.FileUploadRequest{
		TaskID:   taskID,
		FileName: document.FileName,
		FileData: fileData,
		MimeType: mimeType,
	}

	uploadedFile, err := b.fileService.UploadFile(message.From.ID, uploadReq)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}

	clearUserSession(message.From.ID)
	setUserSession(message.From.ID, &UserSession{GroupID: session.GroupID, Data: make(map[string]interface{})})

	text := fmt.Sprintf(`‚úÖ *–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!*

üìé *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s
üìä *–†–∞–∑–º–µ—Ä:* %s
üìÑ *–¢–∏–ø:* %s`,
		utils.EscapeMarkdown(uploadedFile.FileName),
		utils.FormatFileSize(uploadedFile.FileSize),
		uploadedFile.MimeType)

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleUploadFileCommand(message *tgbotapi.Message) {
	session := getUserSession(message.From.ID)
	if session == nil || session.GroupID == 0 {
		b.sendMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /select_group")
		return
	}

	args := strings.Fields(message.CommandArguments())
	if len(args) != 1 {
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upload_file <ID_–∑–∞–¥–∞—á–∏>")
		return
	}

	taskID, err := strconv.ParseUint(args[0], 10, 32)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.GetTaskByID(uint(taskID))
	if err != nil {
		b.sendMessage(message.Chat.ID, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: "+err.Error())
		return
	}

	if task.Group.ID != session.GroupID {
		b.sendMessage(message.Chat.ID, "–ó–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ")
		return
	}

	session.State = "uploading_file"
	session.Data["task_id"] = uint(taskID)
	setUserSession(message.From.ID, session)

	text := fmt.Sprintf(`üìé *–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫ –∑–∞–¥–∞—á–µ*

üìã *–ó–∞–¥–∞—á–∞:* %s

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, ZIP, RAR, TXT, JPG, PNG

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel`,
		utils.EscapeMarkdown(task.Title))

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleTaskFilesCommand(message *tgbotapi.Message) {
	args := strings.Fields(message.CommandArguments())
	if len(args) != 1 {
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task_files <ID_–∑–∞–¥–∞—á–∏>")
		return
	}

	taskID, err := strconv.ParseUint(args[0], 10, 32)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.GetTaskByID(uint(taskID))
	if err != nil {
		b.sendMessage(message.Chat.ID, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: "+err.Error())
		return
	}

	files, err := b.fileService.GetTaskFiles(uint(taskID))
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: "+err.Error())
		return
	}

	if len(files) == 0 {
		text := fmt.Sprintf(`üìé *–§–∞–π–ª—ã –∑–∞–¥–∞—á–∏ "%s"*

–ö —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–π–ª—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload_file %d –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.`,
			utils.EscapeMarkdown(task.Title), taskID)

		b.sendMessage(message.Chat.ID, text)
		return
	}

	var text strings.Builder
	text.WriteString(fmt.Sprintf("üìé *–§–∞–π–ª—ã –∑–∞–¥–∞—á–∏ \"%s\"*\n\n", utils.EscapeMarkdown(task.Title)))

	for i, file := range files {
		text.WriteString(fmt.Sprintf("%d. üìÑ *%s*\n", i+1, utils.EscapeMarkdown(file.FileName)))
		text.WriteString(fmt.Sprintf("   üìä %s ‚Ä¢ %s\n",
			utils.FormatFileSize(file.FileSize),
			file.MimeType))

		if i < len(files)-1 {
			text.WriteString("\n")
		}
	}

	b.sendMessage(message.Chat.ID, text.String())
}

func (b *Bot) handleDownloadFileCommand(message *tgbotapi.Message) {
	args := strings.Fields(message.CommandArguments())
	if len(args) != 1 {
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download_file <ID_—Ñ–∞–π–ª–∞>")
		return
	}

	fileID, err := strconv.ParseUint(args[0], 10, 32)
	if err != nil {
		b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∞–π–ª–∞")
		return
	}

	file, err := b.fileService.GetFileByID(uint(fileID))
	if err != nil {
		b.sendMessage(message.Chat.ID, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: "+err.Error())
		return
	}

	filePath, err := b.fileService.GetFilePath(uint(fileID))
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}

	document := tgbotapi.NewDocument(message.Chat.ID, tgbotapi.FilePath(filePath))
	document.Caption = fmt.Sprintf("üìé %s\nüìä %s",
		file.FileName,
		utils.FormatFileSize(file.FileSize))

	if _, err := b.api.Send(document); err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}
}
